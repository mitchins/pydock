#!/usr/bin/python3
from staticjinja import make_site
from jinja2 import Template
import jinja2
from json import loads, dumps
import shutil
import os
import subprocess
import sys
import argparse

magic_header_token = 'mitchell-currie-script-header:'
expected_start = '# {0}'.format(magic_header_token)

parser = argparse.ArgumentParser()
parser.add_argument('--auto-write', default=False, action='store_const', const=True, help='Write file automatically (no interactive)')
parser.add_argument('destination', help='Usually your haproxy.cfg location')
args = parser.parse_args()

def get_virtual_host(container):
    for Environment in container['Config']['Env']:
        parts = Environment.split('=')
        key, value = parts[0], parts[1]
        if key == 'VIRTUAL_HOST':
            return value

cmd = "docker ps | sed 's/ \{2,\}/\t/g' | tail -n +2 | cut -d$'\t' -f1,6 | md5sum | awk '{ print $1 }'"
ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
checksum = ps.communicate()[0].decode('utf-8').strip()

last_revision = None

with open(args.destination,'r') as fh:
    last_revision = ''  # Denotes existing but not generated by us
    header = fh.readline()
    if header.startswith(expected_start):
        # It's out script's value
        payload = header[len(expected_start):]
        generated_data = loads(payload)
        last_revision = generated_data['checksum']

if last_revision is None:
    print("Configuration file would be created")
elif last_revision == '':
    print("Configuration file by user would be overridden")
elif last_revision == checksum:
    print("Configuration would be unchanged")
else:
    print("Configuration from last script execution has changed")

env = jinja2.Environment( loader = jinja2.FileSystemLoader('./') )
env.globals.update(virtualhost=get_virtual_host)
containers = list()
data = dict()
data["containers"] = list()
out, err = subprocess.Popen(['docker','ps','-q'],stdout=subprocess.PIPE).communicate()

payload = dumps({'checksum': checksum})
data['HEADER'] = "{0}{1}".format(expected_start, payload)

for container in out.splitlines():
  container = container.decode()
  if container == '':
    break
  out2, err2 = subprocess.Popen(['docker','inspect',container],stdout=subprocess.PIPE).communicate()
  details = loads(out2.decode('utf-8'))
  # only add this container if it actually binds port(s)
  if details[0]['NetworkSettings']['Ports']['80/tcp'] is not None:
      data["containers"].append(details[0])

rendered = env.get_template('haconfig.tpl').render(data)

if args.auto_write:
    # write it out to destination straight away
    with open(args.destination,'w') as fh:
        fh.write(rendered)
else:
    # interactive mode - give a few options
    loop = True
    prompt = "Available actions:\n  [a] abort operation\n  [p] preview output\n [w] write output to final location\nAction[apdv:]"
    var = input(prompt)
    while loop:
        if var == 'a':
            print("operation aborted")
            loop = False
        elif var == 'p':
            print("<<<<<START FILE PREVIEW>>>>>\n{0}\n<<<<<END FILE PREVIEW>>>>>".format(rendered))
            loop = False
        elif var == 'w':
            with open(args.destination,'w') as fh:
                fh.write(rendered)
            loop = False
        else:
            var = input("(Unrecognized Option) {0}".format(prompt))

